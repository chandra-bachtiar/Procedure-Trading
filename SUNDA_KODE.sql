CREATE PROCEDURE SUNDA_KODE(
  KUNCI VARCHAR(10),
  HARGA DECIMAL(18, 2))
RETURNS(
  KODE VARCHAR(10))
AS
DECLARE VARIABLE TMP_KUNCI VARCHAR(10);
DECLARE VARIABLE TMP_HARGA VARCHAR(10);
DECLARE VARIABLE TMP_STAR VARCHAR(2);
DECLARE VARIABLE TMP VARCHAR(10);
DECLARE VARIABLE PANJANG_KEY INTEGER;
DECLARE VARIABLE PANJANG_STAR INTEGER;
DECLARE VARIABLE PANJANG_ANGKA INTEGER;
DECLARE VARIABLE ANGKA_DIGUNAKAN VARCHAR(20);
DECLARE VARIABLE NOL_DIGUNAKAN INTEGER;
DECLARE VARIABLE STRING_HARGA VARCHAR(20);
DECLARE VARIABLE LOOP INTEGER;
DECLARE VARIABLE LOOP2 INTEGER;
DECLARE VARIABLE PANJANG_NOL INTEGER;
DECLARE VARIABLE PEMOTONG INTEGER;
DECLARE VARIABLE STEP1 VARCHAR(20);
DECLARE VARIABLE KEYSTEP1 VARCHAR(20);
DECLARE VARIABLE STEP2 VARCHAR(20);
DECLARE VARIABLE KEYSTEP2 VARCHAR(20);
DECLARE VARIABLE STEP3 VARCHAR(20);
DECLARE VARIABLE POSISI INTEGER;
DECLARE VARIABLE POSISI_BINTANG INTEGER;
BEGIN

  IF(COALESCE(KUNCI,'') = '') THEN
  BEGIN
     SELECT COALESCE(KUNCI_HARGA_ENCRYPT,'1234*') FROM MST_CONFIG  
     INTO :KUNCI;
  END

  -- VARIABLE
  STRING_HARGA = CAST(HARGA AS VARCHAR(20));
  STRING_HARGA = SUBSTRING(STRING_HARGA FROM 1 FOR STRLEN(STRING_HARGA)-3);
  POSISI_BINTANG = POSITION('*',KUNCI);
  KUNCI = REPLACE(KUNCI,'*','');
  PANJANG_KEY = STRLEN(KUNCI);
  PANJANG_ANGKA = STRLEN(CAST(HARGA AS VARCHAR(20)))-3;
  PANJANG_STAR = PANJANG_ANGKA - PANJANG_KEY;

  -- STEP 1
  -- Tentukan angka yg digunakan
  LOOP = STRLEN(STRING_HARGA);
  WHILE(LOOP > 0) DO
    BEGIN
      IF(SUBSTRING(STRING_HARGA FROM LOOP FOR 1) <> '0') THEN
      BEGIN
        PANJANG_NOL = LOOP;
        LOOP = 0;
      END
      ELSE
      BEGIN
        LOOP = LOOP - 1;
      END
    END

  /*PEMOTONG = PANJANG_NOL;
  IF(STRLEN(STRING_HARGA) - PANJANG_NOL > PANJANG_KEY) THEN
  BEGIN*/
    PEMOTONG = PANJANG_KEY;
/*  END*/

  ANGKA_DIGUNAKAN = SUBSTRING(STRING_HARGA FROM 1 FOR PEMOTONG);
  NOL_DIGUNAKAN = STRLEN(SUBSTRING(STRING_HARGA FROM STRLEN(ANGKA_DIGUNAKAN)+1 FOR STRLEN(STRING_HARGA)));
  
  --CARI ANGKA SETELAH PANJANG KUNCI
IF(STRLEN(STRING_HARGA) > PEMOTONG) THEN
BEGIN
  IF(CAST(
    SUBSTRING(STRING_HARGA FROM PEMOTONG+1 FOR 1)
  AS INTEGER)>0) THEN ANGKA_DIGUNAKAN = CAST(ANGKA_DIGUNAKAN AS INTEGER)+1;
END
  LOOP = PANJANG_KEY;
  STEP1 = '';
  KEYSTEP1 = '';
  WHILE(LOOP > 0) DO
  BEGIN
    TMP_KUNCI = SUBSTRING(KUNCI FROM LOOP FOR 1);
    IF(cast(TMP_KUNCI AS INTEGER) <= STRLEN(ANGKA_DIGUNAKAN))THEN
    BEGIN
      TMP_HARGA = SUBSTRING(ANGKA_DIGUNAKAN FROM CAST(TMP_KUNCI AS INTEGER) FOR 1);
      TMP = '';
      SELECT HASIL_ENCRYPT FROM ENCRYPT_PRIMARY WHERE KODE_ENCRYPT = :TMP_HARGA
      INTO :TMP;
    
      KEYSTEP1 = TMP_KUNCI || KEYSTEP1;
      STEP1 = TMP || STEP1;
    END
    LOOP = LOOP -1;
  END
  

  -- STEP 2 URUTKAN BERDASARKAN ANGKANYA
  STEP2 = '';
  LOOP = 0;
  WHILE(LOOP < STRLEN(KEYSTEP1)) DO
  BEGIN
    LOOP = LOOP + 1;
    POSISI = POSITION(CAST(LOOP AS VARCHAR(1)), KEYSTEP1);
    STEP2 = STEP2 || SUBSTRING(STEP1 FROM POSISI FOR 1);
  END

  -- STEP 3 TAMBAH DAN CEK POSISI BINTANG
  TMP = '';
  TMP_STAR = STRLEN(STRING_HARGA) - STRLEN(ANGKA_DIGUNAKAN);
  SELECT HASIL_ENCRYPT FROM ENCRYPT_SECONDARY WHERE KODE_ENCRYPT = CAST(:TMP_STAR AS VARCHAR(20))
  INTO :TMP;
  
  IF(POSISI_BINTANG = 1) THEN
  BEGIN
  	 LOOP = STRLEN(STEP2);
     KEYSTEP2 = '';
     WHILE(LOOP > 0) DO
     BEGIN
       KEYSTEP2 =  KEYSTEP2 || SUBSTRING(STEP2 FROM LOOP FOR 1);
       LOOP = LOOP - 1;
     END
     STEP3 = TMP || ' ' || KEYSTEP2;
  END

  IF(POSISI_BINTANG = PANJANG_KEY+1) THEN
  BEGIN
     STEP3 = STEP2 || ' ' || TMP;
  END

  IF(POSISI_BINTANG <> 1 AND POSISI_BINTANG <> PANJANG_KEY+1) THEN
  BEGIN
     STEP3 = SUBSTRING(STEP2 FROM 1 FOR POSISI_BINTANG-1) || ' ' || TMP || ' ' || SUBSTRING(STEP2 FROM POSISI_BINTANG FOR STRLEN(STEP2));
  END
  
  --HASIL
  KODE = STEP3;
  SUSPEND;
END;
